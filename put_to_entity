create or replace 
package BKD_DTP_FAST_PKG is
PROCEDURE CREATE_DTP(dDATE_START DATE, dDATE_END DATE, nREG_CODE NUMBER);
PROCEDURE CREATE_ALL_DTP (dDATE_START DATE, dDATE_END DATE);
function NSI_GET_DIMMEMBERGID_EXT (nID number, szATRR_CODE varchar2, szVALUE varchar2, szDIMENSION_NAME varchar2, szDIFNIELD_NAME varchar2) return number;
FUNCTION GET_FIAS_GID(nREG_CODE NUMBER, cFIAS_NAME VARCHAR2, PL3_AOGUID VARCHAR2 DEFAULT NULL, PL4_AOGUID VARCHAR2 DEFAULT NULL  ) RETURN NUMBER;
procedure GET_GID_ATTR_VAL_EXT (nID number, szATRR_CODE varchar2, szVALUE varchar2, flEN_ATTR number default 1);
PROCEDURE CREATE_TS(nDTP_ENTITY_ID NUMBER , cKARTID VARCHAR2, nROLE_ID NUMBER, cDTP_NAME VARCHAR2);
PROCEDURE CREATE_MEMBER_TS (nDTP_ENTITY_ID NUMBER , cKARTID VARCHAR2, nTS_ENTITY_ID NUMBER, nTS_NUMBER NUMBER, nROLE_ID NUMBER, cDTP_NAME VARCHAR2);
PROCEDURE CREATE_MEMBER_WALK (nDTP_ENTITY_ID NUMBER , cKARTID VARCHAR2, nROLE_ID NUMBER, cDTP_NAME VARCHAR2);
PROCEDURE DEL_DBL_DTP;

end BKD_DTP_FAST_PKG;

create or replace 
package body BKD_DTP_FAST_PKG is

nDTP_TYPE_ID NUMBER(9);
nGIBDD_SOURCE_SYSTEM  NUMBER(9);

nREL_TS_TYPE NUMBER(9);
nREL_MEMBER_DTP_TYPE NUMBER(9);
nREL_MEMBER_TS_TYPE NUMBER(9);

nTS_TYPE_ID NUMBER(9);
nMEMBER_TYPE_ID NUMBER(9);

PROCEDURE CREATE_ALL_DTP(dDATE_START DATE, dDATE_END DATE) IS
BEGIN
  FOR REC IN ( SELECT REG.REGIONCODE, REG.ROLES, REG.REGIONCOGE_DTP
    FROM GZ_FTP_REGIONS REG
   -- where REGIONCODE = 26
    where REGIONCODE NOT IN (777, 99)
    ) LOOP
    BEGIN
      CREATE_DTP(dDATE_START, dDATE_END, REC.REGIONCOGE_DTP);
      DBMS_OUTPUT.PUT_LINE (TO_CHAR(SYSDATE, 'DD.MM.YYYY hh24:MI:SS') ||': ' || REC.REGIONCODE || ' - ok');
    EXCEPTION WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE (TO_CHAR(SYSDATE, 'DD.MM.YYYY hh24:MI:SS') ||': ' || REC.REGIONCODE || 
         ' - ' || sqlerrm || chr(10) || dbms_utility.format_error_backtrace);
    END;
  END LOOP;  
END CREATE_ALL_DTP;  

PROCEDURE CREATE_DTP(dDATE_START DATE, dDATE_END DATE, nREG_CODE NUMBER) IS
 nDTP_ID ENTITY.ENTITY_ID%TYPE;
  nREG_ID  ENTITY.ENTITY_ID%TYPE;
 nDTP_TMP_ID NUMBER;
 nROLE_ID NUMBER(9);
 nREG_DTP NUMBER(9);
 i PLS_INTEGER := 0;

BEGIN
 SELECT REG.REGIONCOGE_DTP, REG.ROLES
  INTO nREG_DTP, nROLE_ID 
 FROM GZ_FTP_REGIONS REG
 WHERE REG.REGIONCODE = nREG_CODE;

 FOR REC IN
   (
WITH NEW_DTP AS (
SELECT DTP.DT DTP_DATE
, DTP.DTPV DTP_TYPE
, DTP.DISTRICT
, KARTID DTP_SYS_ID
, DTP.DISTRICT || DECODE(DTP.DOR, NULL, NULL,  ' ' || DTP.DOR)
               || DECODE(DTP.STREET, NULL, NULL,  ' ' || DTP.STREET)  DTP_NAME
, DTP.SDOR ON_DTP_OBJECTS --M
, DTP.OBJ_DTP NEAR_DTP_OBJECTS --M
, DTP.NDU TRANS_EXPLOAT_PROBLEMS --M
, DTP.FACTOR MOVE_FACTORS --M
, DTP.SPOG WEATHER_COND --M
FROM DTP_CRASH DTP
WHERE REGIONCODE = nREG_DTP
and TO_DATE(DTP.DT, 'DD.MM.YYYY') BETWEEN dDATE_START AND dDATE_END
--and KARTID=214379526
)
, CUR_DTP AS  
(SELECT E.ENTITY_ID, E.FULL_NAME, E.SHORT_NAME, E2A.VAL_INT DTP_SYS_ID_CUR 
 FROM ENTITY E
  INNER JOIN ENTITY_ATTRIBUTE EA ON EA.ENTITY_TYPE_ID = E.ENTITY_TYPE_ID AND EA.CODE = 'DTP_SYS_ID'
  INNER JOIN ENTITY2ATTRIBUTE E2A On E2a.Entity_Id = E.ENTITY_ID AND e2a.entity_attribute_id = EA.ENTITY_ATTRIBUTE_ID
 WHERE E.ISACTUAL = 'Y' AND E.ENTITY_TYPE_ID = nDTP_TYPE_ID)
SELECT * 
FROM (select * from NEW_DTP) NEW_DTP
LEFT JOIN CUR_DTP ON CUR_DTP.DTP_SYS_ID_CUR = NEW_DTP.DTP_SYS_ID   
   ) LOOP
 
IF REC.ENTITY_ID IS NULL THEN
  --Добавляем ДТП
  INSERT INTO ENTITY (ENTITY_KIND_ID, ENTITY_TYPE_ID, SHORT_NAME, FULL_NAME, SRCSTM_ID, ISACTUAL, ENTITY_STATUS_ID )
  VALUES (1, nDTP_TYPE_ID, REC.DTP_NAME, REC.DTP_NAME, 100004 , 'Y', 161715)
  RETURNING ENTITY_ID INTO nDTP_ID ;
 commit;
 
  P_BKD_CONTRACTS_IMPORT_PKG.GRANT_ACCESS(nDTP_ID, nROLE_ID);
ELSE

  UPDATE ENTITY
  SET ENTITY_KIND_ID = 1
  , ENTITY_TYPE_ID = nDTP_TYPE_ID
  , SHORT_NAME = REC.DTP_NAME
  , FULL_NAME = REC.DTP_NAME
  , SRCSTM_ID = 100004
  , ISACTUAL = 'Y'
  , ENTITY_STATUS_ID = 161715
  WHERE ENTITY_ID = REC.ENTITY_ID;
  nDTP_ID := REC.ENTITY_ID;
commit;
END IF;
commit;
  DBMS_OUTPUT.PUT_LINE('nDTP_ID = ' || nDTP_ID||';DTP_REC:'||NVL(REC.ENTITY_ID,0)||';KARTID:'||REC.DTP_SYS_ID);
  
  ------------  связь регион-ДТП
   
  select entity_id into nREG_ID from DTP_VW_REGION where kartid=REC.DTP_SYS_ID;
   
  MERGE INTO ENTITY_RELATION er
  USING 
  (select  entity_id   from DTP_VW_REGION  where kartid=REC.DTP_SYS_ID) Q
  on  (er.ENTITY1_ID=q.entity_id and  ENTITY_RELATION_TYPE_ID=5098501 and  er.ENTITY2_ID =  nDTP_ID )
  WHEN NOT MATCHED THEN   
  INSERT  (ENTITY_RELATION_TYPE_ID, ENTITY1_ID, ENTITY2_ID, ISACTUAL) 
 VALUES (5098501,  nREG_ID,  nDTP_ID, 'Y');

------------  атрибуты ДТП
  MERGE INTO ENTITY2ATTRIBUTE E2A
  USING (
  WITH ATTR_VAL AS (
select * FROM (
SELECT DISTINCT 
DTP.DT  ||' '|| DTP.TIME DTP_DATE
, DTP.COORD_L LONGITUDE
, DTP.COORD_W LATITUDE
, to_char(dtpvgid) DTP_TYPE
, DTP.DISTRICT
, DTP.STREET
, to_char(reggid) REGION
, DTP.DOR ROAD_NAME
, to_char(roadgid) VALUE_OF_THE_ROAD
, DTP.DOR_K ROAD_CATEGORY
, to_char(streetgid) STREET_CATEGORY
, DTP.S_PCH ROAD_COND
, to_char(LIGHTINGgid) LIGHTING
, to_char(CHOMgid) MOVE_CHANGES
, (SELECT TO_CHAR(dm.DIMMEMBER_GID)
    FROM DIMENSION З
    inner JOIN DIMFIELD F On F.DIMENSION_ID = з.DIMENSION_ID and F.PHYSICAL_NAME = 'YEAR'
    INNER JOIn DIMMEMBERSET s ON S.DIMFIELD_ID = F.DIMFIELD_ID and s.VALUE = SUBSTR(DTP.DT, 7, 4)
    inner join dimmember dm on dm.DIMMEMBER_ID = s.DIMMEMBER_ID and dm.ISACTUAL = 'Y' and dm.ISLASTRECORD = 'Y'
    inner join DIMMEMBERSET st ON st.DIMMEMBER_ID = dm.DIMMEMBER_ID and st.VALUE = 'Год'
    where з.PHYSICAL_NAME = 'BKD_PERIOD' )  DEADLINE
, DTP.KTS TS_AMOUNT
, DTP.KUCH PEOPLE_AMOUNT
, DTP.POG DEAD
, DTP.RAN WOUNDED
, TO_CHAR(GET_FIAS_GID(nREG_CODE, DTP.NP))  PARENT_LEVEL_6
, NULL PARENT_LEVEL_3
, NULL PARENT_LEVEL_4
, DTP.HOUSE DTP_HOUSE
, DTP.KM DTP_KM
, DTP.M DTP_M
, 'N' IS_CHECKED
, TO_CHAR(nGIBDD_SOURCE_SYSTEM) "SourceSystem"
, DTP.KARTID DTP_SYS_ID
FROM DTP_MV_DTP_CRASH DTP
WHERE DTP.KARTID = REC.DTP_SYS_ID
)
UNPIVOT
(
 VAL FOR ATTR_CODE IN
     (DTP_DATE,  
     LONGITUDE, 
     LATITUDE,  
     DTP_TYPE,  
     DISTRICT, 
     STREET,
     REGION, 
    ROAD_NAME, 
    VALUE_OF_THE_ROAD, 
    ROAD_CATEGORY,
    STREET_CATEGORY  , 
    ROAD_COND, 
    LIGHTING, 
    MOVE_CHANGES,  
    DEADLINE, 
    TS_AMOUNT, 
    PEOPLE_AMOUNT,
    DEAD,  
    WOUNDED,  
    PARENT_LEVEL_6,
    PARENT_LEVEL_3, 
    PARENT_LEVEL_4, 
    DTP_HOUSE, 
    DTP_KM, 
    DTP_M,
    IS_CHECKED ,   
    "SourceSystem", 
    DTP_SYS_ID
    ) ))
SELECT nDTP_ID ENTITY_ID
, EA.ENTITY_ATTRIBUTE_ID
, CASE WHEN EA.VALUETYPE_ID = 5 THEN NULL ELSE VAL END VAL
, CASE WHEN EA.VALUETYPE_ID = 5 THEN TO_NUMBER(VAL) END GID 
FROM ATTR_VAL V
LEFT JOIN ENTITY_ATTRIBUTE EA ON EA.ENTITY_TYPE_ID = nDTP_TYPE_ID 
  AND V.ATTR_CODE = EA.CODE 
  AND EA.ISACTUAL = 'Y'
   ) Q
ON (Q.ENTITY_ID = E2A.ENTITY_ID AND Q.ENTITY_ATTRIBUTE_ID = E2A.ENTITY_ATTRIBUTE_ID)   
WHEN NOT MATCHED THEN   
  INSERT (ENTITY_ID, ENTITY_ATTRIBUTE_ID, VALUE, DIMMEMBER_GID )
  VALUES (Q.ENTITY_ID, Q.ENTITY_ATTRIBUTE_ID, Q.VAL, Q.GID)
WHEN MATCHED THEN
  UPDATE SET VALUE = Q.VAL
   , DIMMEMBER_GID = Q.GID;
   
----------------------------- PDD_VIOLAT


MERGE INTO ENTITY2ATTRIBUTE E2A
  USING ( WITH ATTR_VAL AS (select * FROM 
  (SELECT DISTINCT 
gid  PDD_VIOLAT , KARTID DTP_SYS_ID
FROM  DTP_VW_N_PDD_UNION DTP
WHERE DTP.KARTID = REC.DTP_SYS_ID)
UNPIVOT
(VAL FOR ATTR_CODE IN (PDD_VIOLAT) ))
SELECT  nDTP_ID ENTITY_ID
, EA.ENTITY_ATTRIBUTE_ID
, CASE WHEN EA.VALUETYPE_ID = 5 THEN NULL ELSE VAL END VAL
, CASE WHEN EA.VALUETYPE_ID = 5 THEN TO_NUMBER(VAL) END GID 
FROM ATTR_VAL V
LEFT JOIN ENTITY_ATTRIBUTE EA ON EA.ENTITY_TYPE_ID = 4599800
  AND V.ATTR_CODE = EA.CODE 
  AND EA.ISACTUAL = 'Y') Q
ON (Q.ENTITY_ID = E2A.ENTITY_ID AND Q.ENTITY_ATTRIBUTE_ID = E2A.ENTITY_ATTRIBUTE_ID AND Q.GID = E2A.DIMMEMBER_GID)   
WHEN NOT MATCHED THEN   
  INSERT (ENTITY_ID, ENTITY_ATTRIBUTE_ID, VALUE, DIMMEMBER_GID )
  VALUES (Q.ENTITY_ID, Q.ENTITY_ATTRIBUTE_ID, Q.VAL, Q.GID)
WHEN MATCHED THEN
  UPDATE SET VALUE = Q.VAL;

---------   CHOM_FACTORS
 MERGE INTO ENTITY2ATTRIBUTE E2A
  USING ( WITH ATTR_VAL AS (select * FROM (SELECT DISTINCT 
 TO_CHAR(BKD_DTP_FAST_PKG.NSI_GET_DIMMEMBERGID_EXT(nID => nDTP_ID,szATRR_CODE => 'CHOM_FACTORS', szVALUE =>dt.nsirowcode,szDIMENSION_NAME=>'CHOM_FACTORS', szDIFNIELD_NAME=>'ROW_CODE'))  MOVE_FACTORS
, KARTID DTP_SYS_ID
FROM  DTP_VW_CHOM_FACTORS DTP
left join (SELECT   nsiname, nsirowcode  FROM DTP_REF_CHOM_FACTORS ) DT  on  dt.nsiname = dtp.FACTOR
WHERE DTP.KARTID = REC.DTP_SYS_ID)
UNPIVOT
(VAL FOR ATTR_CODE IN (MOVE_FACTORS) ))
SELECT  nDTP_ID ENTITY_ID
, EA.ENTITY_ATTRIBUTE_ID
, CASE WHEN EA.VALUETYPE_ID = 5 THEN NULL ELSE VAL END VAL
, CASE WHEN EA.VALUETYPE_ID = 5 THEN TO_NUMBER(VAL) END GID 
FROM ATTR_VAL V
LEFT JOIN ENTITY_ATTRIBUTE EA ON EA.ENTITY_TYPE_ID = 4599800
  AND V.ATTR_CODE = EA.CODE 
  AND EA.ISACTUAL = 'Y') Q
ON (Q.ENTITY_ID = E2A.ENTITY_ID AND Q.ENTITY_ATTRIBUTE_ID = E2A.ENTITY_ATTRIBUTE_ID AND Q.GID = E2A.DIMMEMBER_GID)   
WHEN NOT MATCHED THEN   
  INSERT (ENTITY_ID, ENTITY_ATTRIBUTE_ID, VALUE, DIMMEMBER_GID )
  VALUES (Q.ENTITY_ID, Q.ENTITY_ATTRIBUTE_ID, Q.VAL, Q.GID)
WHEN MATCHED THEN
  UPDATE SET VALUE = Q.VAL;


----------------------------- NDU_PDD

MERGE INTO ENTITY2ATTRIBUTE E2A
  USING ( WITH ATTR_VAL AS (select * FROM (SELECT DISTINCT 
 TO_CHAR(BKD_DTP_FAST_PKG.NSI_GET_DIMMEMBERGID_EXT(nID => nDTP_ID,szATRR_CODE => 'NDU_PDD', 
szVALUE =>dt.nsirowcode,szDIMENSION_NAME=>'NDU_PDD', szDIFNIELD_NAME=>'ROW_CODE'))  TRANS_EXPLOAT_PROBLEMS
, KARTID DTP_SYS_ID
FROM  DTP_VW_NDU_PDD DTP
left join (SELECT   nsiname,  nsirowcode  FROM DTP_REF_NDU_PDD ) DT  on  dt.nsiname = dtp.NDU
WHERE DTP.KARTID = REC.DTP_SYS_ID)
UNPIVOT
(VAL FOR ATTR_CODE IN (TRANS_EXPLOAT_PROBLEMS) ))
SELECT nDTP_ID ENTITY_ID
, EA.ENTITY_ATTRIBUTE_ID
, CASE WHEN EA.VALUETYPE_ID = 5 THEN NULL ELSE VAL END VAL
, CASE WHEN EA.VALUETYPE_ID = 5 THEN TO_NUMBER(VAL) END GID 
FROM ATTR_VAL V
LEFT JOIN ENTITY_ATTRIBUTE EA ON EA.ENTITY_TYPE_ID = 4599800
  AND V.ATTR_CODE = EA.CODE 
  AND EA.ISACTUAL = 'Y') Q
ON (Q.ENTITY_ID = E2A.ENTITY_ID AND Q.ENTITY_ATTRIBUTE_ID = E2A.ENTITY_ATTRIBUTE_ID AND Q.GID = E2A.DIMMEMBER_GID)   
WHEN NOT MATCHED THEN   
  INSERT (ENTITY_ID, ENTITY_ATTRIBUTE_ID, VALUE, DIMMEMBER_GID )
  VALUES (Q.ENTITY_ID, Q.ENTITY_ATTRIBUTE_ID, Q.VAL, Q.GID)
WHEN MATCHED THEN
  UPDATE SET VALUE = Q.VAL;


----------- NEAR_DTP_OBJ
MERGE INTO ENTITY2ATTRIBUTE E2A
  USING ( WITH ATTR_VAL AS (select * FROM (SELECT DISTINCT 
 TO_CHAR(BKD_DTP_FAST_PKG.NSI_GET_DIMMEMBERGID_EXT(nID => nDTP_ID,szATRR_CODE => 'NEAR_DTP_OBJ', 
szVALUE =>dt.nsirowcode,szDIMENSION_NAME=>'NEAR_DTP_OBJ', szDIFNIELD_NAME=>'ROW_CODE'))  NEAR_DTP_OBJECTS
, KARTID DTP_SYS_ID
FROM  DTP_VW_NEAR_DTP_OBJ DTP
left join (SELECT   nsiname,  nsirowcode  FROM DTP_REF_NEAR_DTP_OBJ ) DT  on  dt.nsiname = dtp.OBJ_DTP
WHERE DTP.KARTID = REC.DTP_SYS_ID)
UNPIVOT
(VAL FOR ATTR_CODE IN (NEAR_DTP_OBJECTS) ))
SELECT nDTP_ID ENTITY_ID
, EA.ENTITY_ATTRIBUTE_ID
, CASE WHEN EA.VALUETYPE_ID = 5 THEN NULL ELSE VAL END VAL
, CASE WHEN EA.VALUETYPE_ID = 5 THEN TO_NUMBER(VAL) END GID 
FROM ATTR_VAL V
LEFT JOIN ENTITY_ATTRIBUTE EA ON EA.ENTITY_TYPE_ID = 4599800
  AND V.ATTR_CODE = EA.CODE 
  AND EA.ISACTUAL = 'Y') Q
ON (Q.ENTITY_ID = E2A.ENTITY_ID AND Q.ENTITY_ATTRIBUTE_ID = E2A.ENTITY_ATTRIBUTE_ID AND Q.GID = E2A.DIMMEMBER_GID)   
WHEN NOT MATCHED THEN   
  INSERT (ENTITY_ID, ENTITY_ATTRIBUTE_ID, VALUE, DIMMEMBER_GID )
  VALUES (Q.ENTITY_ID, Q.ENTITY_ATTRIBUTE_ID, Q.VAL, Q.GID)
WHEN MATCHED THEN
  UPDATE SET VALUE = Q.VAL;

-------------------- ON_DTP_OBJ

MERGE INTO ENTITY2ATTRIBUTE E2A
  USING ( WITH ATTR_VAL AS (select * FROM (SELECT DISTINCT 
 TO_CHAR(BKD_DTP_FAST_PKG.NSI_GET_DIMMEMBERGID_EXT(nID => nDTP_ID,szATRR_CODE => 'ON_DTP_OBJ', 
szVALUE =>dt.nsirowcode,szDIMENSION_NAME=>'ON_DTP_OBJ', szDIFNIELD_NAME=>'ROW_CODE'))  ON_DTP_OBJECTS
, KARTID DTP_SYS_ID
FROM  DTP_VW_ON_DTP_OBJ DTP
left join (SELECT   nsiname,  nsirowcode  FROM DTP_REF_ON_DTP_OBJ ) DT  on  dt.nsiname = dtp.SDOR
WHERE DTP.KARTID = REC.DTP_SYS_ID)
UNPIVOT
(VAL FOR ATTR_CODE IN (ON_DTP_OBJECTS) ))
SELECT nDTP_ID ENTITY_ID
, EA.ENTITY_ATTRIBUTE_ID
, CASE WHEN EA.VALUETYPE_ID = 5 THEN NULL ELSE VAL END VAL
, CASE WHEN EA.VALUETYPE_ID = 5 THEN TO_NUMBER(VAL) END GID 
FROM ATTR_VAL V
LEFT JOIN ENTITY_ATTRIBUTE EA ON EA.ENTITY_TYPE_ID = 4599800
  AND V.ATTR_CODE = EA.CODE 
  AND EA.ISACTUAL = 'Y') Q
ON (Q.ENTITY_ID = E2A.ENTITY_ID AND Q.ENTITY_ATTRIBUTE_ID = E2A.ENTITY_ATTRIBUTE_ID AND Q.GID = E2A.DIMMEMBER_GID)   
WHEN NOT MATCHED THEN   
  INSERT (ENTITY_ID, ENTITY_ATTRIBUTE_ID, VALUE, DIMMEMBER_GID )
  VALUES (Q.ENTITY_ID, Q.ENTITY_ATTRIBUTE_ID, Q.VAL, Q.GID)
WHEN MATCHED THEN
  UPDATE SET VALUE = Q.VAL;

------------------  WEATHER_COND

MERGE INTO ENTITY2ATTRIBUTE E2A
  USING ( WITH ATTR_VAL AS (select * FROM (SELECT DISTINCT 
 TO_CHAR(BKD_DTP_FAST_PKG.NSI_GET_DIMMEMBERGID_EXT(nID => nDTP_ID,szATRR_CODE => 'WEATHER_COND', 
szVALUE =>dt.nsirowcode,szDIMENSION_NAME=>'WEATHER_COND', szDIFNIELD_NAME=>'ROW_CODE'))  WEATHER_COND
, KARTID DTP_SYS_ID
FROM  DTP_VW_WEATHER_COND DTP
left join (SELECT   nsiname,  nsirowcode  FROM DTP_REF_WEATHER_COND ) DT  on  dt.nsiname = dtp.SPOG
WHERE DTP.KARTID = REC.DTP_SYS_ID)
UNPIVOT
(VAL FOR ATTR_CODE IN (WEATHER_COND) ))
SELECT nDTP_ID ENTITY_ID
, EA.ENTITY_ATTRIBUTE_ID
, CASE WHEN EA.VALUETYPE_ID = 5 THEN NULL ELSE VAL END VAL
, CASE WHEN EA.VALUETYPE_ID = 5 THEN TO_NUMBER(VAL) END GID 
FROM ATTR_VAL V
LEFT JOIN ENTITY_ATTRIBUTE EA ON EA.ENTITY_TYPE_ID = 4599800
  AND V.ATTR_CODE = EA.CODE 
  AND EA.ISACTUAL = 'Y') Q
ON (Q.ENTITY_ID = E2A.ENTITY_ID AND Q.ENTITY_ATTRIBUTE_ID = E2A.ENTITY_ATTRIBUTE_ID AND Q.GID = E2A.DIMMEMBER_GID)   
WHEN NOT MATCHED THEN   
  INSERT (ENTITY_ID, ENTITY_ATTRIBUTE_ID, VALUE, DIMMEMBER_GID )
  VALUES (Q.ENTITY_ID, Q.ENTITY_ATTRIBUTE_ID, Q.VAL, Q.GID)
WHEN MATCHED THEN
  UPDATE SET VALUE = Q.VAL;

------------
--Создаем ТС ДТП
CREATE_TS(nDTP_ID, REC.DTP_SYS_ID, nROLE_ID, REC.DTP_NAME ); 

--  Создаем участников ДТП пешеходов
   CREATE_MEMBER_WALK(nDTP_ENTITY_ID => nDTP_ID
               , cKARTID => REC.DTP_SYS_ID
               , nROLE_ID => nROLE_ID
               , cDTP_NAME => REC.DTP_NAME);

 --вставка геометрии
--nDTP_TMP_ID := TO_NUMBER(nDTP_ID);
--if nDTP_TMP_ID>0
--then
--    BKD_DTP_GEO_PKG.SET_DTP_GEOMETRY(nDTP_TMP_ID);   
--end if;

 i := i + 1;
  IF I = 100 THEN
    COMMIT;
    i:= 0;
  END IF;

END LOOP;
COMMIT;
END CREATE_DTP;


/***************************************/
PROCEDURE CREATE_TS(nDTP_ENTITY_ID NUMBER , cKARTID VARCHAR2, nROLE_ID NUMBER, cDTP_NAME VARCHAR2) IS
nTS_ID NUMBER(9); 
BEGIN
  FOR REC IN (
    WITH NEW_TS AS (SELECT N_TS TS_NUMBER
, 'Транспортное средство № ' || t.N_TS || ' в ' || cDTP_NAME  NEW_FULL_NAME
, M_POV DAMAGE_PLACES --M
, T_N TECH_PROBLEMS --M
FROM DTP_CRASH_TS t
WHERE t.kartid = cKARTID --393761 
)
, CUR_TS AS
(SELECT E.ENTITY_ID, E.FULL_NAME, E.SHORT_NAME 
  FROM ENTITY E
  INNER JOIN ENTITY_RELATION ER ON ER.ENTITY2_ID = E.ENTITY_ID AND ER.ISACTUAL = 'Y' 
   AND ER.ENTITY1_ID = nDTP_ENTITY_ID
   AND ER.ENTITY_RELATION_TYPE_ID = nREL_TS_TYPE
  WHERE E.ISACTUAL = 'Y'
   AND E.ENTITY_TYPE_ID = nTS_TYPE_ID 
)
SELECT * FROM NEW_TS
 LEFT JOIN CUR_TS ON NEW_TS.TS_NUMBER = CUR_TS.SHORT_NAME) LOOP
 
 IF REC.ENTITY_ID IS NULL THEN
   
  /*Добавляем ТС */
  INSERT INTO ENTITY (ENTITY_KIND_ID, ENTITY_TYPE_ID, SHORT_NAME, FULL_NAME, SRCSTM_ID, ISACTUAL, ENTITY_STATUS_ID )
  VALUES (1, nTS_TYPE_ID, REC.TS_NUMBER, REC.NEW_FULL_NAME, 100004 , 'Y', 161715)
  RETURNING ENTITY_ID INTO nTS_ID ;
  P_BKD_CONTRACTS_IMPORT_PKG.GRANT_ACCESS(nTS_ID, nROLE_ID);
  
  INSERT INTO ENTITY_RELATION (ENTITY_RELATION_TYPE_ID, ENTITY1_ID, ENTITY2_ID, ISACTUAL)
  VALUES (nREL_TS_TYPE, nDTP_ENTITY_ID, nTS_ID, 'Y');
  
   -- insert into aalog (errors) values ('TS ENTITY_TYPE_ID '||nREL_TS_TYPE ||' ENTITY1_ID '|| nDTP_ENTITY_ID||' ENTITY2_ID '||nTS_ID);
  
ELSE
  UPDATE ENTITY 
  SET ENTITY_KIND_ID = 1
  , ENTITY_TYPE_ID = nTS_TYPE_ID
  , SHORT_NAME = REC.TS_NUMBER
  , FULL_NAME = REC.NEW_FULL_NAME
  , SRCSTM_ID = 100004
  , ISACTUAL = 'Y'
  , ENTITY_STATUS_ID = 161715
  WHERE ENTITY_ID = REC.ENTITY_ID;
  nTS_ID := REC.ENTITY_ID;
   
 END IF;   
 
 /*Заполняем атрибуты*/

 MERGE INTO ENTITY2ATTRIBUTE E2A
 USING (WITH NEW_TS AS (
SELECT * FROM (
SELECT N_TS TS_NUMBER,
to_char(tsgid) LEAVING_PLACE 
-- TO_CHAR(NSI_GET_DIMMEMBERGID_EXT(nID => nTS_ID,szATRR_CODE => 'LEAVING_PLACE', szVALUE =>TS_S,szDIMENSION_NAME=>'T_TS', szDIFNIELD_NAME=>'NAME')) LEAVING_PLACE 
, to_char(ttgid) TS_TYPE 
-- TO_CHAR(NSI_GET_DIMMEMBERGID_EXT(nID => nTS_ID,szATRR_CODE => 'TS_TYPE', szVALUE =>T_TS,szDIMENSION_NAME=>'TS_TYPE', szDIFNIELD_NAME=>'NAME')) TS_TYPE 
, to_char(wdgid) WHEEL 
--, TO_CHAR(NSI_GET_DIMMEMBERGID_EXT(nID => nTS_ID,szATRR_CODE => 'WHEEL', szVALUE =>R_RUL,szDIMENSION_NAME=>'WHEEL_DTP', szDIFNIELD_NAME=>'NAME')) WHEEL 
, G_V TS_DATE
, to_char(fsgid) PROPERTY_FORM 
--TO_CHAR(NSI_GET_DIMMEMBERGID_EXT(nID => nTS_ID,szATRR_CODE => 'PROPERTY_FORM', szVALUE =>O_PF,szDIMENSION_NAME=>'DTP_F_SOB', szDIFNIELD_NAME=>'NAME')) PROPERTY_FORM 
, MARKA_TS TS_BRAND
, M_TS TS_MODEL
, COLOR TS_COLOR
--, M_POV DAMAGE_PLACES --M
, TO_CHAR(nGIBDD_SOURCE_SYSTEM) "SourceSystem"
, 'N' IS_CHECKED
--, TO_CHAR(BKD_UTL_PKG.NSI_GET_DIMMEMBERGID('TS_PROB', 'NAME', T_N)) TECH_PROBLEMS  
FROM DTP_MV_DTP_CRASH_TS t
WHERE t.kartid = cKARTID--393761 
 AND t.n_ts = rec.TS_NUMBER
) UNPIVOT
( ATTR_VAL 
 FOR ATT_CODE IN (TS_NUMBER, LEAVING_PLACE, TS_TYPE, WHEEL, TS_DATE, PROPERTY_FORM
   , TS_BRAND, TS_MODEL, TS_COLOR, "SourceSystem", IS_CHECKED/*, TECH_PROBLEMS*/)
)
)
SELECT nTS_ID ENTITY_ID
 , EA.ENTITY_ATTRIBUTE_ID
 , CASE WHEN EA.VALUETYPE_ID = 5 THEN NULL ELSE ATTR_VAL END VAL
 , CASE WHEN EA.VALUETYPE_ID = 5 THEN ATTR_VAL END GID
  FROM NEW_TS
 LEFT JOIN ENTITY_ATTRIBUTE EA ON EA.ENTITY_TYPE_ID = nTS_TYPE_ID AND EA.ISACTUAL = 'Y' AND EA.CODE = ATT_CODE) Q
 ON (Q.ENTITY_ID = E2A.ENTITY_ID AND Q.ENTITY_ATTRIBUTE_ID = E2A.ENTITY_ATTRIBUTE_ID) 
  WHEN NOT MATCHED THEN   
    INSERT (ENTITY_ID, ENTITY_ATTRIBUTE_ID, VALUE, DIMMEMBER_GID )
    VALUES (Q.ENTITY_ID, Q.ENTITY_ATTRIBUTE_ID, Q.VAL, Q.GID)
  WHEN MATCHED THEN
    UPDATE SET VALUE = Q.VAL
     , DIMMEMBER_GID = Q.GID; 
     
-------------------------------------------- TECH_PROBLEMS

MERGE INTO ENTITY2ATTRIBUTE E2A
 USING (WITH NEW_TS AS (
SELECT * FROM (
SELECT N_TS TS_NUMBER,
 TO_CHAR(BKD_DTP_FAST_PKG.NSI_GET_DIMMEMBERGID_EXT(nID => 1233010,szATRR_CODE => 'TS_PROB', 
szVALUE =>dt.nsirowcode,szDIMENSION_NAME=>'TS_PROB', szDIFNIELD_NAME=>'ROW_CODE'))  TECH_PROBLEMS
FROM  DTP_VW_TS_PROB t
left join (SELECT   nsiname,  nsirowcode  FROM DTP_REF_TS_PROB ) DT  on  dt.nsiname = t.T_N
WHERE t.kartid = cKARTID   AND t.n_ts = rec.TS_NUMBER
) UNPIVOT
( ATTR_VAL 
 FOR ATT_CODE IN (TECH_PROBLEMS)
)
)
SELECT nTS_ID ENTITY_ID
 , EA.ENTITY_ATTRIBUTE_ID
 , CASE WHEN EA.VALUETYPE_ID = 5 THEN NULL ELSE ATTR_VAL END VAL
 , CASE WHEN EA.VALUETYPE_ID = 5 THEN ATTR_VAL END GID
  FROM NEW_TS
 LEFT JOIN ENTITY_ATTRIBUTE EA ON EA.ENTITY_TYPE_ID = nTS_TYPE_ID AND EA.ISACTUAL = 'Y' AND EA.CODE = ATT_CODE) Q
 ON (Q.ENTITY_ID = E2A.ENTITY_ID AND Q.ENTITY_ATTRIBUTE_ID = E2A.ENTITY_ATTRIBUTE_ID AND Q.GID = E2A.DIMMEMBER_GID)   
  WHEN NOT MATCHED THEN   
    INSERT (ENTITY_ID, ENTITY_ATTRIBUTE_ID, VALUE, DIMMEMBER_GID )
    VALUES (Q.ENTITY_ID, Q.ENTITY_ATTRIBUTE_ID, Q.VAL, Q.GID)
  WHEN MATCHED THEN
    UPDATE SET VALUE = Q.VAL;  
     

------------------------------------
/*Создаем участников*/
 -- insert into aalog (errors) values (' in nDTP_ENTITY_ID '||nDTP_ENTITY_ID ||' cKARTID  '|| cKARTID ||' nTS_ENTITY_ID '||nTS_ID 
 -- ||' nTS_NUMBER '||REC.TS_NUMBER ||' nROLE_ID  '|| nROLE_ID ||' cDTP_NAME '||cDTP_NAME);
 
  CREATE_MEMBER_TS(nDTP_ENTITY_ID => nDTP_ENTITY_ID
               , cKARTID => cKARTID
               , nTS_ENTITY_ID => nTS_ID
               , nTS_NUMBER => REC.TS_NUMBER
               , nROLE_ID => nROLE_ID
               , cDTP_NAME => cDTP_NAME);
     
 END LOOP;
END CREATE_TS;  
/************************************/
PROCEDURE CREATE_MEMBER_TS (nDTP_ENTITY_ID NUMBER , cKARTID VARCHAR2, nTS_ENTITY_ID NUMBER, nTS_NUMBER NUMBER, nROLE_ID NUMBER, cDTP_NAME VARCHAR2) IS
 nMEMBER_ID ENTITY.ENTITY_ID%TYPE;
BEGIN 
  FOR REC IN 
    (WITH NEW_MEMBER AS (SELECT
  N_UCH PERS_NUMBER
  , UCH.K_UCH || ' № ' || UCH.N_UCH || ' в ' || cDTP_NAME  NEW_FULL_NAME
 -- , ROWID RID
  , NPDD PDD_VIOLAT --M
  , SOP_NPDD PDD_VIOLAT_RELAT --M
FROM DTP_CRASH_TS_UCH UCH
where UCH.KARTID = cKARTID --393761
 and UCH.N_TS = nTS_NUMBER
 --and DTP_TS_ID = nTS_ID --631396 
 )
, CUR_MEMBER AS 
 (SELECT E.ENTITY_ID, E.FULL_NAME, E.SHORT_NAME
  FROM ENTITY E
   INNER JOIN ENTITY_RELATION ER ON ER.ISACTUAL = 'Y' 
     AND ER.ENTITY1_ID = nDTP_ENTITY_ID--1483198/*ДТП*/
     AND ER.ENTITY_RELATION_TYPE_ID = nREL_MEMBER_DTP_TYPE
     and ER.ENTITY2_ID = E.ENTITY_ID
  WHERE E.ISACTUAL = 'Y'
   AND E.ENTITY_TYPE_ID = nMEMBER_TYPE_ID --5045878  
   )
select * from NEW_MEMBER 
 LEFT JOIN CUR_MEMBER ON CUR_MEMBER.FULL_NAME = NEW_MEMBER.NEW_FULL_NAME) LOOP
  IF REC.ENTITY_ID IS NULL THEN
    /*Добавляем участника*/
    INSERT INTO ENTITY (ENTITY_KIND_ID, ENTITY_TYPE_ID, SHORT_NAME, FULL_NAME, SRCSTM_ID, ISACTUAL, ENTITY_STATUS_ID )
    VALUES (1, nMEMBER_TYPE_ID, REC.PERS_NUMBER, REC.NEW_FULL_NAME, 100004 , 'Y', 161715)
    RETURNING ENTITY_ID INTO nMEMBER_ID ;
    
    P_BKD_CONTRACTS_IMPORT_PKG.GRANT_ACCESS(nMEMBER_ID, nROLE_ID);
    
    INSERT INTO ENTITY_RELATION (ENTITY_RELATION_TYPE_ID, ENTITY1_ID, ENTITY2_ID, ISACTUAL)
    VALUES (nREL_MEMBER_DTP_TYPE, nDTP_ENTITY_ID, nMEMBER_ID, 'Y');
    
 --insert into aalog (errors) values 
 --(' insert uch ENTITY_RELATION_TYPE_ID - nREL_MEMBER_DTP_TYPE '||nREL_MEMBER_DTP_TYPE ||
 --' ENTITY1_ID -  nDTP_ENTITY_ID '|| nDTP_ENTITY_ID ||
 --' ENTITY2_ID -  nMEMBER_ID '||nMEMBER_ID );
  
    IF nTS_ENTITY_ID IS NOT NULL THEN
      INSERT INTO ENTITY_RELATION (ENTITY_RELATION_TYPE_ID, ENTITY2_ID, ENTITY1_ID, ISACTUAL)
      VALUES (nREL_MEMBER_TS_TYPE, nTS_ENTITY_ID, nMEMBER_ID, 'Y');
    END IF;
   
  ELSE
    UPDATE ENTITY 
    SET 
      ENTITY_KIND_ID = 1
    , SHORT_NAME = REC.PERS_NUMBER
    , FULL_NAME = REC.NEW_FULL_NAME
    , SRCSTM_ID = 100004
    , ISACTUAL = 'Y'
    , ENTITY_STATUS_ID = 161715
    WHERE ENTITY_ID = REC.ENTITY_ID;
    nMEMBER_ID := REC.ENTITY_ID;
    
 --    insert into aalog (errors) values 
 --(' update uch SHORT_NAME '||REC.PERS_NUMBER ||
 --' FULL_NAME '||REC.NEW_FULL_NAME||
 --' ENTITY_ID '||  REC.ENTITY_ID ||
 --' nMEMBER_ID '|| REC.ENTITY_ID );
 
  END IF;  
  
  /*Обновляем атрибуты*/

 MERGE INTO ENTITY2ATTRIBUTE E2A
 USING (WITH NEW_MEMBER AS (
  SELECT * FROM (
  SELECT
  N_UCH PERS_NUMBER
 , to_char(kugid) PERS_CATEGORY
, to_char(ldgid) PERS_LEAVING_PLACE
 , CASE UPPER(POL) 
      WHEN 'МУЖСКОЙ' THEN 'Y' 
      WHEN 'ЖЕНСКИЙ' THEN 'N'
    END SEX
 , to_char(stgid) WOUND_CONS
, DECODE(SAFETY_BELT, 'Да', 'Y', 'Нет', 'N' ) SAFE_BELT
  , ALCO ALCO_LEVEL
  , V_ST DRIVING_EXP
  , TO_CHAR(nGIBDD_SOURCE_SYSTEM) "SourceSystem"
  , 'N' IS_CHECKED
  , S_SEAT_GROUP CHILD_SEAT
  FROM DTP_MV_DTP_CRASH_TS_UCH  UCH
  where KARTID = cKARTID --393761
   and UCH.N_TS = nTS_NUMBER
   and UCH.N_UCH=REC.PERS_NUMBER 
  )
  UNPIVOT 
  (  ATTR_VAL
   FOR ATTR_CODE IN (PERS_NUMBER, PERS_CATEGORY, PERS_LEAVING_PLACE, SEX, WOUND_CONS
     , SAFE_BELT, ALCO_LEVEL, DRIVING_EXP, "SourceSystem", IS_CHECKED, CHILD_SEAT)
  ) 
)
select nMEMBER_ID ENTITY_ID
, EA.ENTITY_ATTRIBUTE_ID
 , CASE WHEN EA.VALUETYPE_ID = 5 THEN NULL ELSE ATTR_VAL END VAL
 , CASE WHEN EA.VALUETYPE_ID = 5 THEN ATTR_VAL END GID 
from NEW_MEMBER 
 INNER JOIN ENTITY_ATTRIBUTE EA ON EA.ENTITY_TYPE_ID = nMEMBER_TYPE_ID 
 AND EA.ISACTUAL = 'Y' AND EA.CODE = NEW_MEMBER.ATTR_CODE ) Q ON (Q.ENTITY_ID = E2A.ENTITY_ID AND Q.ENTITY_ATTRIBUTE_ID = E2A.ENTITY_ATTRIBUTE_ID) 
  WHEN NOT MATCHED THEN   
    INSERT (ENTITY_ID, ENTITY_ATTRIBUTE_ID, VALUE, DIMMEMBER_GID )
    VALUES (Q.ENTITY_ID, Q.ENTITY_ATTRIBUTE_ID, Q.VAL, Q.GID)
  WHEN MATCHED THEN
    UPDATE SET VALUE = Q.VAL
     , DIMMEMBER_GID = Q.GID; 
     
 --insert into aalog (errors) values 
 --(' insert atr uch UCH.N_TS = nTS_NUMBER '||nTS_NUMBER ||
 --' KARTID = cKARTID '|| cKARTID ||
 --'  nMEMBER_ID ENTITY_ID '||nMEMBER_ID ||
 -- 'EA.ENTITY_TYPE_ID = nMEMBER_TYPE_ID'|| nMEMBER_TYPE_ID);
 
   ----------------------------------------------------------------  N_PDD 
 MERGE INTO ENTITY2ATTRIBUTE E2A
 USING (WITH NEW_MEMBER AS (
  SELECT * FROM (
  SELECT
  UCH.N_UCH PERS_NUMBER,
  to_char(gid) PDD_VIOLAT
  FROM DTP_VW_N_PDD_TS  UCH
  where UCH.KARTID = cKARTID  and UCH.N_UCH=REC.PERS_NUMBER and UCH.N_TS = nTS_NUMBER)
  UNPIVOT 
  (  ATTR_VAL
   FOR ATTR_CODE IN (PERS_NUMBER,  PDD_VIOLAT)
  ) 
)
select nMEMBER_ID ENTITY_ID
, EA.ENTITY_ATTRIBUTE_ID
 , CASE WHEN EA.VALUETYPE_ID = 5 THEN NULL ELSE ATTR_VAL END VAL
 , CASE WHEN EA.VALUETYPE_ID = 5 THEN ATTR_VAL END GID 
from NEW_MEMBER 
 INNER JOIN ENTITY_ATTRIBUTE EA ON EA.ENTITY_TYPE_ID = nMEMBER_TYPE_ID   AND EA.ISACTUAL = 'Y' AND EA.CODE = NEW_MEMBER.ATTR_CODE ) Q
 ON (Q.ENTITY_ID = E2A.ENTITY_ID AND Q.ENTITY_ATTRIBUTE_ID = E2A.ENTITY_ATTRIBUTE_ID AND Q.GID = E2A.DIMMEMBER_GID) 
  WHEN NOT MATCHED THEN   
    INSERT (ENTITY_ID, ENTITY_ATTRIBUTE_ID, VALUE, DIMMEMBER_GID )
    VALUES (Q.ENTITY_ID, Q.ENTITY_ATTRIBUTE_ID, Q.VAL, Q.GID)
  WHEN MATCHED THEN
    UPDATE SET VALUE = Q.VAL;
--------------------------------------------- REL_NPDD

MERGE INTO ENTITY2ATTRIBUTE E2A
 USING (WITH NEW_MEMBER AS (
  SELECT * FROM (
  SELECT
  N_UCH PERS_NUMBER,
  to_char(gid)  PDD_VIOLAT_RELAT
  FROM DTP_VW_REL_NPDD_TS  UCH
  where UCH.KARTID = cKARTID  and UCH.N_UCH=REC.PERS_NUMBER  and UCH.N_TS = nTS_NUMBER)
  UNPIVOT 
  (  ATTR_VAL
   FOR ATTR_CODE IN (PERS_NUMBER,  PDD_VIOLAT_RELAT)
  ) 
)
select nMEMBER_ID ENTITY_ID
, EA.ENTITY_ATTRIBUTE_ID
 , CASE WHEN EA.VALUETYPE_ID = 5 THEN NULL ELSE ATTR_VAL END VAL
 , CASE WHEN EA.VALUETYPE_ID = 5 THEN ATTR_VAL END GID 
from NEW_MEMBER 
 INNER JOIN ENTITY_ATTRIBUTE EA ON EA.ENTITY_TYPE_ID = nMEMBER_TYPE_ID   AND EA.ISACTUAL = 'Y' AND EA.CODE = NEW_MEMBER.ATTR_CODE ) Q
 ON (Q.ENTITY_ID = E2A.ENTITY_ID AND Q.ENTITY_ATTRIBUTE_ID = E2A.ENTITY_ATTRIBUTE_ID AND Q.GID = E2A.DIMMEMBER_GID) 
  WHEN NOT MATCHED THEN   
    INSERT (ENTITY_ID, ENTITY_ATTRIBUTE_ID, VALUE, DIMMEMBER_GID )
    VALUES (Q.ENTITY_ID, Q.ENTITY_ATTRIBUTE_ID, Q.VAL, Q.GID)
  WHEN MATCHED THEN
    UPDATE SET VALUE = Q.VAL;
  
  END LOOP;  
EXCEPTION WHEN OTHERS THEN
  RAISE_APPLICATION_ERROR(-20000, 'Ошибка создания водителя/пассажира ' ||
   ' nDTP_ENTITY_ID = ' || nDTP_ENTITY_ID || ' cKARTID = ' || cKARTID ||' ' ||
   sqlerrm);    
END CREATE_MEMBER_TS; 

/************************************/
PROCEDURE CREATE_MEMBER_WALK (nDTP_ENTITY_ID NUMBER , cKARTID VARCHAR2, nROLE_ID NUMBER, cDTP_NAME VARCHAR2) IS
 nMEMBER_ID ENTITY.ENTITY_ID%TYPE;
BEGIN 
  FOR REC IN 
    (WITH NEW_MEMBER AS (SELECT
N_UCH PERS_NUMBER
/*DTP_CRASH_UCHINFO. K_UCH - «№» - DTP_CRASH_UCHINFO.N_UCH - «в» - наименование ДТП */
, UCH.K_UCH || ' № ' || ' в ' || cDTP_NAME NEW_FULL_NAME
--, ROWID RID
FROM DTP_CRASH_UCHINFO UCH
where KARTID = cKARTID --393761
 )
, CUR_MEMBER AS 
 (SELECT E.ENTITY_ID, E.FULL_NAME, E.SHORT_NAME
  FROM ENTITY E
   INNER JOIN ENTITY_RELATION ER ON ER.ISACTUAL = 'Y' 
     AND ER.ENTITY1_ID = nDTP_ENTITY_ID--1483198/*ДТП*/
     AND ER.ENTITY_RELATION_TYPE_ID = nREL_MEMBER_DTP_TYPE
     and ER.ENTITY2_ID = E.ENTITY_ID
  WHERE E.ISACTUAL = 'Y'
   AND E.ENTITY_TYPE_ID = nMEMBER_TYPE_ID --5045878  
   )
select * from NEW_MEMBER 
 LEFT JOIN CUR_MEMBER ON CUR_MEMBER.FULL_NAME = NEW_MEMBER.NEW_FULL_NAME) LOOP
  IF REC.ENTITY_ID IS NULL THEN
    /*Добавляем участника*/
    INSERT INTO ENTITY (ENTITY_KIND_ID, ENTITY_TYPE_ID, SHORT_NAME, FULL_NAME, SRCSTM_ID, ISACTUAL, ENTITY_STATUS_ID )
    VALUES (1, nMEMBER_TYPE_ID, REC.PERS_NUMBER, REC.NEW_FULL_NAME, 100004 , 'Y', 161715)
    RETURNING ENTITY_ID INTO nMEMBER_ID ;
    
    P_BKD_CONTRACTS_IMPORT_PKG.GRANT_ACCESS(nMEMBER_ID, nROLE_ID);
    
    INSERT INTO ENTITY_RELATION (ENTITY_RELATION_TYPE_ID, ENTITY1_ID, ENTITY2_ID, ISACTUAL)
    VALUES (nREL_MEMBER_DTP_TYPE, nDTP_ENTITY_ID, nMEMBER_ID, 'Y');

  ELSE
    UPDATE ENTITY 
    SET 
      ENTITY_KIND_ID = 1
    , SHORT_NAME = REC.PERS_NUMBER
    , FULL_NAME = REC.NEW_FULL_NAME
    , SRCSTM_ID = 100004
    , ISACTUAL = 'Y'
    , ENTITY_STATUS_ID = 161715
    WHERE ENTITY_ID = REC.ENTITY_ID;
    nMEMBER_ID := REC.ENTITY_ID;

  END IF;  
  /*Обновляем атрибуты*/
 --* изменения под задачу 10031
 MERGE INTO ENTITY2ATTRIBUTE E2A
 USING (WITH NEW_MEMBER AS (
  SELECT * FROM (
  SELECT
  N_UCH PERS_NUMBER
  , to_char(kugid) PERS_CATEGORY
 , to_char(ldgid) PERS_LEAVING_PLACE
  , CASE UPPER(POL) 
      WHEN 'МУЖСКОЙ' THEN 'Y' 
      WHEN 'ЖЕНСКИЙ' THEN  'N'
    END SEX
  , to_char(stgid) WOUND_CONS
 , NULL SAFE_BELT
  , ALCO ALCO_LEVEL
  , V_ST DRIVING_EXP
  , TO_CHAR(nGIBDD_SOURCE_SYSTEM) "SourceSystem"
  , 'N' IS_CHECKED
  , NULL CHILD_SEAT
  FROM DTP_MV_DTP_CRASH_UCHINFO  UCH
  where UCH.KARTID = cKARTID --393761
  and UCH.N_UCH=REC.PERS_NUMBER
  )
  UNPIVOT 
  (  ATTR_VAL
   FOR ATTR_CODE IN (PERS_NUMBER, PERS_CATEGORY, PERS_LEAVING_PLACE, SEX, WOUND_CONS,
   SAFE_BELT, ALCO_LEVEL, DRIVING_EXP, "SourceSystem", IS_CHECKED, CHILD_SEAT)
  ) 
)
select nMEMBER_ID ENTITY_ID
, EA.ENTITY_ATTRIBUTE_ID
 , CASE WHEN EA.VALUETYPE_ID = 5 THEN NULL ELSE ATTR_VAL END VAL
 , CASE WHEN EA.VALUETYPE_ID = 5 THEN ATTR_VAL END GID 
from NEW_MEMBER 
 INNER JOIN ENTITY_ATTRIBUTE EA ON EA.ENTITY_TYPE_ID = nMEMBER_TYPE_ID /*5045878*/ AND EA.ISACTUAL = 'Y' AND EA.CODE = NEW_MEMBER.ATTR_CODE ) Q
 ON (Q.ENTITY_ID = E2A.ENTITY_ID AND Q.ENTITY_ATTRIBUTE_ID = E2A.ENTITY_ATTRIBUTE_ID) 
  WHEN NOT MATCHED THEN   
    INSERT (ENTITY_ID, ENTITY_ATTRIBUTE_ID, VALUE, DIMMEMBER_GID )
    VALUES (Q.ENTITY_ID, Q.ENTITY_ATTRIBUTE_ID, Q.VAL, Q.GID)
  WHEN MATCHED THEN
    UPDATE SET VALUE = Q.VAL
     , DIMMEMBER_GID = Q.GID; 
     
  ----------------------------------------------------------------  N_PDD 
MERGE INTO ENTITY2ATTRIBUTE E2A
 USING (WITH NEW_MEMBER AS (
  SELECT * FROM (
  SELECT
  UCH.N_UCH PERS_NUMBER,
  to_char(gid) PDD_VIOLAT
  FROM DTP_VW_N_PDD  UCH
  where UCH.KARTID = cKARTID  and UCH.N_UCH=REC.PERS_NUMBER)
  UNPIVOT 
  (  ATTR_VAL
   FOR ATTR_CODE IN (PERS_NUMBER,  PDD_VIOLAT)
  ) 
)
select nMEMBER_ID ENTITY_ID
, EA.ENTITY_ATTRIBUTE_ID
 , CASE WHEN EA.VALUETYPE_ID = 5 THEN NULL ELSE ATTR_VAL END VAL
 , CASE WHEN EA.VALUETYPE_ID = 5 THEN ATTR_VAL END GID 
from NEW_MEMBER 
 INNER JOIN ENTITY_ATTRIBUTE EA ON EA.ENTITY_TYPE_ID = nMEMBER_TYPE_ID   AND EA.ISACTUAL = 'Y' AND EA.CODE = NEW_MEMBER.ATTR_CODE ) Q
 ON (Q.ENTITY_ID = E2A.ENTITY_ID AND Q.ENTITY_ATTRIBUTE_ID = E2A.ENTITY_ATTRIBUTE_ID AND Q.GID = E2A.DIMMEMBER_GID) 
  WHEN NOT MATCHED THEN   
    INSERT (ENTITY_ID, ENTITY_ATTRIBUTE_ID, VALUE, DIMMEMBER_GID )
    VALUES (Q.ENTITY_ID, Q.ENTITY_ATTRIBUTE_ID, Q.VAL, Q.GID)
  WHEN MATCHED THEN
    UPDATE SET VALUE = Q.VAL;
--------------------------------------------- REL_NPDD

MERGE INTO ENTITY2ATTRIBUTE E2A
 USING (WITH NEW_MEMBER AS (
  SELECT * FROM (
  SELECT
  N_UCH PERS_NUMBER,
  to_char(gid)  PDD_VIOLAT_RELAT
  FROM DTP_VW_REL_NPDD  UCH
  where UCH.KARTID = cKARTID  and UCH.N_UCH=REC.PERS_NUMBER )
  UNPIVOT 
  (  ATTR_VAL
   FOR ATTR_CODE IN (PERS_NUMBER,  PDD_VIOLAT_RELAT)
  ) 
)
select nMEMBER_ID ENTITY_ID
, EA.ENTITY_ATTRIBUTE_ID
 , CASE WHEN EA.VALUETYPE_ID = 5 THEN NULL ELSE ATTR_VAL END VAL
 , CASE WHEN EA.VALUETYPE_ID = 5 THEN ATTR_VAL END GID 
from NEW_MEMBER 
 INNER JOIN ENTITY_ATTRIBUTE EA ON EA.ENTITY_TYPE_ID = nMEMBER_TYPE_ID   AND EA.ISACTUAL = 'Y' AND EA.CODE = NEW_MEMBER.ATTR_CODE ) Q
 ON (Q.ENTITY_ID = E2A.ENTITY_ID AND Q.ENTITY_ATTRIBUTE_ID = E2A.ENTITY_ATTRIBUTE_ID AND Q.GID = E2A.DIMMEMBER_GID) 
  WHEN NOT MATCHED THEN   
    INSERT (ENTITY_ID, ENTITY_ATTRIBUTE_ID, VALUE, DIMMEMBER_GID )
    VALUES (Q.ENTITY_ID, Q.ENTITY_ATTRIBUTE_ID, Q.VAL, Q.GID)
  WHEN MATCHED THEN
    UPDATE SET VALUE = Q.VAL;
  
    
  END LOOP;  
EXCEPTION WHEN OTHERS THEN
  RAISE_APPLICATION_ERROR(-20000, 'Ошибка создания пешехода ' ||
   ' nDTP_ENTITY_ID = ' || nDTP_ENTITY_ID || ' cKARTID = ' || cKARTID ||' ' ||
   sqlerrm);  
END CREATE_MEMBER_WALK;  


/************************************/

PROCEDURE DEL_DBL_DTP AS
        col_dbl_entity_id number_tab;
BEGIN
           select  curr.m_eid bulk collect into col_dbl_entity_id from
                            (
                            SELECT E.SHORT_NAME, E2A.VAL_INT DTP_SYS_ID_CUR
                             FROM ENTITY E
                              INNER JOIN ENTITY_ATTRIBUTE EA ON EA.ENTITY_TYPE_ID = E.ENTITY_TYPE_ID AND EA.CODE = 'DTP_SYS_ID'
                              INNER JOIN ENTITY2ATTRIBUTE E2A On E2a.Entity_Id = E.ENTITY_ID AND e2a.entity_attribute_id = EA.ENTITY_ATTRIBUTE_ID
                             WHERE E.ISACTUAL = 'Y' AND E.ENTITY_TYPE_ID = nDTP_TYPE_ID AND E.SRCSTM_ID=100004
                               GROUP BY  E.SHORT_NAME, E2A.VAL_INT
                               HAVING  count(*)>1
                            ) dbl
                            inner join (
                                SELECT  min(E.ENTITY_ID) M_EID, E.SHORT_NAME, E2A.VAL_INT DTP_SYS_ID_CUR
                                   FROM ENTITY E
                              INNER JOIN ENTITY_ATTRIBUTE EA ON EA.ENTITY_TYPE_ID = E.ENTITY_TYPE_ID AND EA.CODE = 'DTP_SYS_ID'
                              INNER JOIN ENTITY2ATTRIBUTE E2A On E2a.Entity_Id = E.ENTITY_ID AND e2a.entity_attribute_id = EA.ENTITY_ATTRIBUTE_ID
                             WHERE E.ISACTUAL = 'Y' AND E.ENTITY_TYPE_ID = nDTP_TYPE_ID AND E.SRCSTM_ID=100004
                               GROUP BY  E.SHORT_NAME, E2A.VAL_INT
                            ) curr on  curr.DTP_SYS_ID_CUR = dbl.DTP_SYS_ID_CUR;
            
            FORALL I IN 1 .. col_dbl_entity_id.COUNT
                    UPDATE  ENTITY_RELATION  SET ISACTUAL=NULL, COMMENTS='TEST DEL DBL 10031' WHERE entity1_id=col_dbl_entity_id(i);
            FORALL I IN 1 .. col_dbl_entity_id.COUNT
                    UPDATE  ENTITY  SET ISACTUAL=NULL WHERE entity_id=col_dbl_entity_id(i);                 
            
END DEL_DBL_DTP;

/***************************************/
function NSI_GET_DIMMEMBERGID_EXT (nID number, szATRR_CODE varchar2, szVALUE varchar2, szDIMENSION_NAME varchar2, szDIFNIELD_NAME varchar2) return number IS
    
    const_dic_type number := 5;
    out_dmm_gid     number := 0;
    l_attribute_id  number;
    l_is_multi      char(1);
    l_val_type_id   number;
      
    l_dmm_gid number:= 0;
begin
        out_dmm_gid := NVL(BKD_UTL_PKG.NSI_GET_DIMMEMBERGID(szDIMENSION_NAME, szDIFNIELD_NAME, szVALUE),0);
        if out_dmm_gid = 0
        then
            select a.ENTITY_ATTRIBUTE_ID, a.ISMULTIPLE, a.VALUETYPE_ID INTO l_attribute_id, l_is_multi,l_val_type_id from
            (select  ENTITY_ATTRIBUTE_ID, ISMULTIPLE,VALUETYPE_ID, ENTITY_TYPE_ID, dimension_id,DIMFIELD_ID  from ENTITY_ATTRIBUTE where CODE=szATRR_CODE and ISACTUAL='Y') a
            inner join (select ENTITY_TYPE_ID from ENTITY where ENTITY_ID=nID) typ on typ.ENTITY_TYPE_ID = a.ENTITY_TYPE_ID;
            if l_val_type_id = const_dic_type and l_attribute_id>0
            then

                begin
                    select NVL(DIMMEMBER_GID,0) INTO l_dmm_gid from 
                        (select distinct DIMMEMBER_GID from DTP_CRASH_NOTFOUND where ATTR_ID=l_attribute_id and VALUE=szVALUE and DIMMEMBER_GID is not null) ;
                exception when no_data_found then  l_dmm_gid := 0;       
                end;        
                if l_dmm_gid = 0
                then
                   GET_GID_ATTR_VAL_EXT(nID, szATRR_CODE, szVALUE); 
                    out_dmm_gid := NULL;
                else
                    out_dmm_gid := l_dmm_gid; 
                end if;
            end if;
            
        end if;
    return out_dmm_gid;
end NSI_GET_DIMMEMBERGID_EXT;

/***************************************/
FUNCTION GET_FIAS_GID(nREG_CODE NUMBER, cFIAS_NAME VARCHAR2, PL3_AOGUID VARCHAR2 DEFAULT NULL, PL4_AOGUID VARCHAR2 DEFAULT NULL  ) RETURN NUMBER
IS
nDIMMEMBERGID ENTITY2ATTRIBUTE.DIMMEMBER_GID%TYPE;
BEGIN
  /*Ищем в фиасе внутри региона нас. пункт по наименованию*/
   SELECT max(DM.DIMMEMBER_GID)
    INTO nDIMMEMBERGID
    FROM DIMENSION D
     INNER JOIN DIMMEMBER DM ON DM.DIMENSION_ID = D.DIMENSION_ID
     INNER JOIN DIMFIELD DF ON DF.DIMENSION_ID = D.DIMENSION_ID
     INNER JOIN DIMMEMBERSET DMS ON DMS.DIMMEMBER_ID = DM.DIMMEMBER_ID AND DMS.DIMFIELD_ID = DF.DIMFIELD_ID
    WHERE
     D.PHYSICAL_NAME = 'BKD_FIAS'
     AND D.SRCSTM_ID = 1
     AND DF.PHYSICAL_NAME = 'NAME'
     AND DMS.VALUE = cFIAS_NAME
     AND DM.ISACTUAL = 'Y'
     AND DM.ISLASTRECORD = 'Y'
     AND EXISTS (SELECT 1
                 FROM DIMMEMBERSET DMS_REG
                   INNER JOIN DIMFIELD DF_REG ON DF_REG.DIMFIELD_ID = DMS_REG.DIMFIELD_ID
                 WHERE DMS_REG.VALUE = TO_CHAR(nREG_CODE)
                  AND DF_REG.PHYSICAL_NAME = 'REGIONCODE'
                  AND DMS_REG.DIMMEMBER_ID = DM.DIMMEMBER_ID
                 )
     /*если передан PL3 или  PL4, то ищем только строки c этими PARENTGUID*/
     AND (EXISTS (SELECT 1
                 FROM DIMMEMBERSET DMS_REG
                   INNER JOIN DIMFIELD DF_REG ON DF_REG.DIMFIELD_ID = DMS_REG.DIMFIELD_ID
                 WHERE DMS_REG.VALUE = PL3_AOGUID
                  AND DF_REG.PHYSICAL_NAME = 'PARENTGUID'
                  AND DMS_REG.DIMMEMBER_ID = DM.DIMMEMBER_ID
                 UNION ALL
                  SELECT 1
                 FROM DIMMEMBERSET DMS_REG
                   INNER JOIN DIMFIELD DF_REG ON DF_REG.DIMFIELD_ID = DMS_REG.DIMFIELD_ID
                 WHERE DMS_REG.VALUE = PL4_AOGUID
                  AND DF_REG.PHYSICAL_NAME = 'PARENTGUID'
                  AND DMS_REG.DIMMEMBER_ID = DM.DIMMEMBER_ID
                 )
              OR (PL3_AOGUID IS NULL AND  PL4_AOGUID  IS NULL)
                 )
                  ;

  RETURN nDIMMEMBERGID;
END GET_FIAS_GID;

/***************************************/
procedure GET_GID_ATTR_VAL_EXT  (nID number, szATRR_CODE varchar2, szVALUE varchar2, flEN_ATTR number default 1) IS
    
    PRAGMA AUTONOMOUS_TRANSACTION;
    const_dic_type number := 5;
    l_attribute_id  number;
    l_is_multi      char(1);
    l_val_type_id  number;
    l_dimfield_id   number;
    l_dimension_id  number;
    l_dm_ph_name    varchar2(500);
    l_df_ph_name    varchar2(500);
    l_dmm_gid       number := 0;
    out_dmm_gid     number;
begin
    --1. Атрибут есть и установлен, тогда находим значение и update или инсерт, если флаг мультиустановлен
    --2. Атрибута нет, тогда insert 
    --3. Нет значенния, то в таблицу
    --выясняем все про атрибут
    begin
        if flEN_ATTR = 1
        then
            select a.ENTITY_ATTRIBUTE_ID, a.ISMULTIPLE, a.VALUETYPE_ID INTO l_attribute_id, l_is_multi,l_val_type_id from
            (select  ENTITY_ATTRIBUTE_ID, ISMULTIPLE,VALUETYPE_ID, ENTITY_TYPE_ID, dimension_id,DIMFIELD_ID  from ENTITY_ATTRIBUTE where CODE=szATRR_CODE and ISACTUAL='Y') a
            inner join (select ENTITY_TYPE_ID from ENTITY where ENTITY_ID=nID) typ on typ.ENTITY_TYPE_ID = a.ENTITY_TYPE_ID;
        else
             select a.ENTITY_ATTRIBUTE_ID, a.ISMULTIPLE, a.VALUETYPE_ID INTO l_attribute_id, l_is_multi,l_val_type_id from
            (select  ENTITY_ATTRIBUTE_ID,ISMULTIPLE,VALUETYPE_ID, ENTITY_RELATION_TYPE_ID, dimension_id,DIMFIELD_ID  from ENTITY_ATTRIBUTE where CODE=szATRR_CODE and ISACTUAL='Y') a
            inner join (select ENTITY_RELATION_TYPE_ID from ENTITY_RELATION where ENTITY_RELATION_ID=nID) typ on typ.ENTITY_RELATION_TYPE_ID = a.ENTITY_RELATION_TYPE_ID;           
        end if;
        
        EXCEPTION WHEN OTHERS THEN l_attribute_id := 0;
    end;
    
    --проверка значения
    if l_val_type_id = const_dic_type and l_attribute_id>0
    then
        --сюда добавить поход в таблицу DTP_CRASH_NOTFOUND
        begin
            select NVL(DIMMEMBER_GID,0) INTO l_dmm_gid from 
                (select distinct DIMMEMBER_GID from DTP_CRASH_NOTFOUND where ATTR_ID=l_attribute_id and VALUE=szVALUE  and DIMMEMBER_GID is not null);
        exception when no_data_found then  l_dmm_gid := 0;       
        end;        
        if l_dmm_gid = 0 and szVALUE is not null
        then
           begin
           merge into  DTP_CRASH_NOTFOUND t
            using (select szATRR_CODE ATR_CODE, l_attribute_id ATTR_ID, szVALUE VALUE, entity_id from entity where entity_id=nID and isactual='Y') s
            on (t.ATTR_ID = s.ATTR_ID and t.VALUE=s.VALUE and t.ID = s.entity_id)
            when not  matched then INSERT (t.ID, t.ATR_CODE, t.VALUE, t.ATTR_ID) VALUES (s.entity_id, s.ATR_CODE, s.VALUE, s.ATTR_ID);
            out_dmm_gid := 0;
            commit;
            exception when others then  out_dmm_gid:= 0;
          end;  
        else
            out_dmm_gid := l_dmm_gid; 
        end if;
    end if;
   
    --return out_dmm_gid;

end GET_GID_ATTR_VAL_EXT;
 
begin
 nDTP_TYPE_ID := BKD_UTL_PKG.GET_ENTITY_TYPE_ID(40031, 1);
 nTS_TYPE_ID := BKD_UTL_PKG.GET_ENTITY_TYPE_ID(564, 1);
 nMEMBER_TYPE_ID := BKD_UTL_PKG.GET_ENTITY_TYPE_ID(334, 3 );
 
 nREL_TS_TYPE := BKD_UTL_PKG.GET_ENTITY_REL_TYPE_ID(401);
 nREL_MEMBER_DTP_TYPE := BKD_UTL_PKG.GET_ENTITY_REL_TYPE_ID(424);
 nREL_MEMBER_TS_TYPE := BKD_UTL_PKG.GET_ENTITY_REL_TYPE_ID(423);
 
 nGIBDD_SOURCE_SYSTEM := BKD_UTL_PKG.NSI_GET_DIMMEMBERGID('BKD_SOURCE_SYSTEM', 'NAME', 'Официальный сайт Госавтоинспекции');
 
end BKD_DTP_FAST_PKG;
